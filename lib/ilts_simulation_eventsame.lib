%*******************************************%
% This lib computes symbolic simulation     %
% relation between two polynomial dynamical %
% systems based on the implicit transition  %
% system representations of them.           %
% Input: S_I1, S_I2                         %
% Output: ilts_simulation(S_I1,S_I2)        %
% Contraint: S_I1 and S_I2 have same events %
%*******************************************%


% internal function P1 ==> P2 %
def implies(P1,P2) :
   union(complementary(P1),
      P2);

def states_simulation_events(X_1,Y,X_1_nexts,Rel_1,
	                         X_2,X_2_nexts,Rel_2) :
   with
      % define utility variables %
      X_1_X_2 = union_lvar(X_1,X_2),
      X_1_X_2_nexts = union_lvar(X_1_nexts,X_2_nexts)
   do

   % compute the simulation %
   loop x =
    intersection(x,
	 	forall(forall(implies(Rel_1,
		  exist(intersection(Rel_2,
		   rename(x,X_1_X_2,X_1_X_2_nexts)),
		   X_2_nexts)),Y),X_1_nexts))
    init 0;


def ilts_simulation_eventsame(S_I1,S_I2) :
   with
      % get the components of iLTS1 %
      I_1 = initial_I(S_I1),
      X_1 = state_var_I(S_I1),
      X_1_nexts = state_var_next_I(S_I1),
      Y = event_var_I(S_I1),
      Rel_1 = trans_rel_I(S_I1),
      
      % get the components of iLTS2 %
      I_2_d = initial_I(S_I2),
      X_2_d = state_var_I(S_I2),
      X_2_nexts_d = state_var_next_I(S_I2),
      Rel_2_d = trans_rel_I(S_I2),
      % rename the states variables %
      X_2 = declare_suff(X_2_d),
      X_2_nexts = declare_suff(X_2_nexts_d),
	  I_2 = rename(I_2_d,X_2_d,X_2),
      Rel_2 = rename(Rel_2_d,union_lvar(X_2_d,X_2_nexts_d),
	                 union_lvar(X_2,X_2_nexts)),
      states_sim_events = states_simulation_events(X_1,Y,X_1_nexts,
                   Rel_1,X_2,X_2_nexts,Rel_2)
   do

   % compute the systems simulation %
   intersection(states_sim_events,
                forall(implies(I_1,exist(intersection(
                       states_sim_events,I_2),X_2)),X_1));
